单例模式：
    单例模式保证一个类仅有一个实例，并提供了一个访问的全局访问点。当系统需要某个只能有一个实例时，就可以采用单例模式。
工厂模式
    简单工厂、工厂、抽象工厂模式的特定与实现方法。当用户需要一个类的子类实例，且不希望与该类的子类形成耦合或者不知道该类有哪些子类可用时，可采用工厂模式；当用户需要系统提供多个对象，且希望和创建对象的类解耦，可采用抽象工厂模式。

责任链模式
    责任链模式定义如下：使用多个对象都有机会处理请求，从而避免清求的发送者和接收者之间的耦合关系。
    将这些对象连城一条链，并沿着这条链传递该请求对象，直到有一个对象处理它为止。
    适合使用责任链模式的情景如下：有许多对象可以处理用户的请求，应用程序可自动确定谁处理用户请求；希望在用户不必明确指定接收者的情况下，向多个接收者提交一个请求；程序希望动态定制可处理用户请求的对象集合。
  代理模式：
    代理模式定义如下：为其他对象提供一组代理以控制对这个对象的访问。适合代理模式的情景如下：不希望用户直接访问该对象，而是提供一个特殊的对象以控制对当前对象的访问；如果一个对象需要很长时间才能加载完成；如果对象位于远程主机上，需要为用户提供远程访问能力。
       代理特点 代理角色与实际主题角色有形同的父类接口，常用的代理方式有四种：虚拟代理、远程代理、技术代理、动态代理
       代理定义：给某一个对象提供一个代理，并由代理对象控制对源对象的引用，代理模式 Poxy ,Surrogate, 她是一种结果模式
       虚拟代理：如果需要创建一个资源消耗较大的对象，就先创建一个消耗相对较少的对象来表示，真实对象只在需要时才会被正真创建。当用户请求一个大对象是，虚拟代理在该对象真正被创建出来之前扮演着替身的角色；当该对象被创建出来之后，虚拟代理就将用户的请求直接委托给该对象
       动态代理：


